name: Staging deployment

on:
  push:
    branches:
      - staging

env:
  # Must match k8s deployment name
  DEPLOYMENT: open-crawler
  CLIENT_DEPLOYMENT: open-crawler-client
  DEPLOYMENT_NAMESPACE: open-crawler
  DEPLOYMENT_URL: https://open-crawler.dataesr.ovh
  MM_NOTIFICATION_CHANNEL: 'bots'

jobs:
  publish-ghcr:
    name: Publish docker images to ghcr.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get Tag
        id: repository
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "name=${IMAGE_ID}" >> $GITHUB_OUTPUT

      - name: Get Tag
        id: version
        run: echo "tag=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Log into registry
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Build client image
        run: docker build -f Client.Staging.Dockerfile -t ${{ steps.repository.outputs.name }}-client:${{ steps.version.outputs.tag }} .

      - name: Build web api image
        run: docker build -f Dockerfile -t ${{ steps.repository.outputs.name }}:${{ steps.version.outputs.tag }} .

      - name: Build lighthouse worker image
        run: docker build -f Lighthouse.Dockerfile -t ${{ steps.repository.outputs.name }}-lighthouse:${{ steps.version.outputs.tag }} .

      # - name: Build wappalyzer worker image
      #   run: docker build -f Wappalyzer.Dockerfile -t ${{ steps.repository.outputs.name }}-wappalyzer:${{ steps.version.outputs.tag }} .



      - name: Push images
        run: |
          docker push -a ${{ steps.repository.outputs.name }}
          docker push -a ${{ steps.repository.outputs.name }}-lighthouse
          docker push -a ${{ steps.repository.outputs.name }}-client
# docker push -a ${{ steps.repository.outputs.name }}-wappalyzer


  deploy:
    name: Update staging deployment
    runs-on: ubuntu-latest
    needs: publish-ghcr
    steps:
      - name: Restart crawler deployment
        id: kubectl-crawler-deploy
        uses: dataesr/kubectl-deploy@v1.1
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DOAD_STAGING }}
        with:
          namespace: ${{ env.DEPLOYMENT_NAMESPACE }}
          restart: ${{ env.DEPLOYMENT }}
      - name: Restart client deployment
        id: kubectl--client-deploy
        uses: dataesr/kubectl-deploy@v1.1
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DOAD_STAGING }}
        with:
          namespace: ${{ env.DEPLOYMENT_NAMESPACE }}
          restart: ${{ env.CLIENT_DEPLOYMENT }}

  # notify:
  #   needs: deploy
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: dataesr/mm-notifier-action@v1
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN}}
  #         mattermost_webhook_url: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
  #         mattermost_channel: ${{ env.MM_NOTIFICATION_CHANNEL}}
  #         deployment_url: ${{ env.DEPLOYMENT_URL }}