version: "3.1"

services:
  web_api:
    container_name: web_api
    build: .
    env_file: .env
    command: uvicorn api.main:api_app --reload --port 80 --host 0.0.0.0
    ports:
      - "8080:80"
    depends_on:
      - rabbitmq
    volumes:
      - ./open_crawler:/app
    deploy:
      restart_policy:
        condition: on-failure

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.12.2-management
    hostname: rabbitmq
    env_file: .env
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    container_name: redis
    image: redis
    hostname: redis
    env_file: .env
    ports:
      - "6379:6379"
    deploy:
      restart_policy:
        condition: on-failure

  crawl_worker: &worker
#    container_name: crawl_worker
    build: .
    env_file: .env
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n crawl_worker -Q crawl_queue'
    volumes:
      - ./open_crawler:/app
      - local_files:${LOCAL_FILES_PATH}
    depends_on:
      - rabbitmq
      - web_api
    deploy:
      restart_policy:
        condition: on-failure
      replicas: 2

  accessibility_worker:
    <<: *worker
#    container_name: accessibility_worker
    build:
      context: .
      dockerfile: Lighthouse.Dockerfile
    command: watchfiles --filter python '/bin/bash -c "source /opt/venv/bin/activate && celery -A celery_broker.main.celery_app worker -l info -P solo -n accessibility_worker -Q accessibility_queue"'

  technologies_worker:
    <<: *worker
#    container_name: technologies_worker
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n technologies_worker -Q technologies_queue'

  good_practices_worker:
    <<: *worker
#    container_name: good_practices_worker
    build:
      context: .
      dockerfile: Lighthouse.Dockerfile
    command: watchfiles --filter python '/bin/bash -c "source /opt/venv/bin/activate && celery -A celery_broker.main.celery_app worker -l info -P solo -n good_practices_worker -Q good_practices_queue"'

  responsiveness_worker:
    <<: *worker
#    container_name: responsiveness_worker
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n responsiveness_worker -Q responsiveness_queue'

  carbon_footprint_worker:
    <<: *worker
#    container_name: carbon_footprint_worker
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n carbon_footprint_worker -Q carbon_footprint_queue'

  upload_worker:
    <<: *worker
#    container_name: upload_worker
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n upload_worker -Q upload_queue'
    environment:
      STORAGE_SERVICE_USERNAME_FILE: /run/secrets/storage-service-username
      STORAGE_SERVICE_PASSWORD_FILE: /run/secrets/storage-service-password
      STORAGE_SERVICE_URL: "minio:9000"
      STORAGE_SERVICE_BUCKET_NAME: "test" # TODO: Change value before build
    secrets:
      - storage-service-username
      - storage-service-password


  flower:
    container_name: flower
    image: mher/flower
    command: celery flower -p 5555
    env_file: .env
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - web_api
    deploy:
      restart_policy:
        condition: on-failure

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9090:9090"
    env_file: .env
    environment:
      MINIO_ROOT_USER_FILE: /run/secrets/storage-service-username
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/storage-service-password
      MINIO_ACCESS_KEY_FILE: /run/secrets/storage-service-username
      MINIO_SECRET_KEY_FILE: /run/secrets/storage-service-password
    command: server --console-address ":9090" /data
    volumes:
      - minio:${MINIO_PATH}
    secrets:
      - storage-service-username
      - storage-service-password
    deploy:
      restart_policy:
        condition: on-failure

  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    env_file: .env
    volumes:
      - mongodb:${MONGODB_PATH}
    deploy:
      restart_policy:
        condition: on-failure

secrets:
  storage-service-username:
    file: ./secrets/storage_service_username.txt
  storage-service-password:
    file: ./secrets/storage_service_password.txt

volumes:
  minio:
  local_files:
  mongodb: