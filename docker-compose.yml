version: "3.1"

services:
  web_api:
    container_name: web_api
    build: .
    env_file: .env
    command: uvicorn api.main:api_app --reload --port 80 --host 0.0.0.0
    ports:
      - "8080:80"
    depends_on:
      - redis
    volumes:
      - ./app:/open-crawler/app
      - logs:/logs
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    container_name: redis
    image: redis
    hostname: redis
    env_file: .env
    ports:
      - "6379:6379"
    deploy:
      restart_policy:
        condition: on-failure

  crawl_worker: &worker
    build: .
    env_file: .env
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n crawl_worker -Q crawl_queue,finalize_crawl_queue'
    # An example with prefork.
    #command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P prefork -c 4 -n crawl_worker -Q crawl_queue,finalize_crawl_queue'
    volumes:
      - ./app:/open-crawler/app
      - local_files:${LOCAL_FILES_PATH}
      - logs:/logs
    depends_on:
      - redis
      - web_api
    deploy:
      restart_policy:
        condition: on-failure
      replicas: 1

  lighthouse_worker:
    <<: *worker
    build:
      context: .
      dockerfile: Lighthouse.Dockerfile
    command: watchfiles --filter python '/bin/bash -c "source /opt/venv/bin/activate && celery -A celery_broker.main.celery_app worker -l info -P solo -n lighthouse_worker -Q lighthouse_queue"'
    deploy:
      replicas: 1

  technologies_worker:
    <<: *worker
    build:
      context: .
      dockerfile: Wappalyzer.Dockerfile
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n technologies_worker -Q technologies_queue'
    deploy:
      replicas: 1

  responsiveness_worker:
    <<: *worker
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n responsiveness_worker -Q responsiveness_queue'
    deploy:
      replicas: 1

  carbon_footprint_worker:
    <<: *worker
    command: watchfiles --filter python 'celery -A celery_broker.main.celery_app worker -l info -P solo -n carbon_footprint_worker -Q carbon_footprint_queue'
    deploy:
      replicas: 1


  flower:
    container_name: flower
    image: mher/flower
    command: celery flower -p 5555 --url_prefix=flower
    env_file: .env
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - web_api
    deploy:
      restart_policy:
        condition: on-failure

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9090:9090"
    env_file: .env
    environment:
      MINIO_ROOT_USER: ${STORAGE_SERVICE_USERNAME}
      MINIO_ROOT_PASSWORD: ${STORAGE_SERVICE_PASSWORD}
    command: server --console-address ":9090" /data
    volumes:
      - minio:${MINIO_PATH}
    deploy:
      restart_policy:
        condition: on-failure

  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    env_file: .env
    volumes:
      - mongodb:${MONGODB_PATH}
    deploy:
      restart_policy:
        condition: on-failure


volumes:
  minio:
  local_files:
  mongodb:
  logs: